<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const i18nToLoad = [entityInstance];
for (const idx in fields) {
    if (fields[idx].fieldIsEnum === true) {
        i18nToLoad.push(fields[idx].enumInstance);
    }
}
// const query = generateEntityQueries(relationships, entityInstance, dto);
// const queries = query.queries;
// const variables = query.variables;
// let hasManyToMany = query.hasManyToMany;
_%>
import React, { useState, useEffect } from 'react';
import { connect } from 'react-redux';
import { RouteComponentProps } from 'react-router-dom';
import {
  Translate,
  translate,
  <%_ if (fieldsContainBlob) { _%>
  setFileData,
  <% if (fieldsContainBlobOrImage) { %> openFile,<% } %>
  byteSize,
  <%_ } _%>
} from 'react-jhipster';
import { IRootState } from 'app/shared/reducers';
import moment from 'moment';
import {InputTextarea} from 'primereact/inputtextarea';
import {ListBox} from 'primereact/listbox';
<%_
let hasRelationshipQuery = false;
let otherEntityActions = new Set();
let manyToManyOwners = new Set();
let relFieldNames = new Set();
let uniqueRealtionFields = new Set();


Object.keys(differentRelationships).forEach(key => {

  const hasAnyRelationshipQuery = differentRelationships[key].some(rel =>
      (rel.relationshipType === 'one-to-one' && rel.ownerSide === true && rel.otherEntityName !== 'user')
          || rel.relationshipType !== 'one-to-many'
  );
  if (hasAnyRelationshipQuery) {
    hasRelationshipQuery = true;
    differentRelationships[key].forEach(rel => {
      if (rel.relationshipType === 'many-to-many' && rel.ownerSide === true) {
        manyToManyOwners.add(rel);
      } else {
        relFieldNames.add(rel);
      }
    });
  }
  if (differentRelationships[key].some(rel => rel.relationshipType !== 'one-to-many')) {
    const uniqueRel = differentRelationships[key][0];
    uniqueRealtionFields.add(uniqueRel.otherEntityNamePlural);
    otherEntityActions.add({
      action: `get${upperFirstCamelCase(uniqueRel.otherEntityNamePlural)}`,
      instance: `${uniqueRel.otherEntityNamePlural}`,
      entity: uniqueRel.otherEntityAngularName,
      reducer: uniqueRel.otherEntityAngularName === 'User' ? 'userManagement' : uniqueRel.otherEntityName
    });
    if (uniqueRel.otherEntityAngularName === 'User') {
_%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/shared/model/user.model';
<%_ if (authenticationType === 'oauth2') { _%>
import { getUsers } from 'app/shared/reducers/user-management';
<%_ } else { _%>
import { getUsers } from 'app/modules/administration/user-management/user-management.reducer';
<%_ } _%>
<%_
  } else {
    if (uniqueRel.otherEntityAngularName !== entityReactName) {
_%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/shared/model/<%= uniqueRel.otherEntityModelName %>.model';
  <%_ } _%>
import { getEntities as get<%= upperFirstCamelCase(uniqueRel.otherEntityNamePlural) %> } from 'app/entities/<%= uniqueRel.otherEntityPath %>/<%= uniqueRel.otherEntityFileName %>.reducer';
<%_ }
  }
}); _%>
import {
  getEntity,
  updateEntity,
  createEntity,
  <%_ if (fieldsContainBlob) { _%>
    setBlob,
  <%_ } _%>
  reset
} from './<%= entityFileName %>.reducer';
import { I<%= entityReactName %> } from 'app/shared/model/<%= entityModelFileName %>.model';
import { convertDateTimeFromServer, convertDateTimeToServer } from 'app/shared/util/date-utils';
<%_ if (relationships.filter(e => e.relationshipType === 'many-to-many') !== undefined) { _%>
import { mapIdList } from 'app/shared/util/entity-utils';
<%_ } _%>
import { Message } from 'primereact/message';
import { Checkbox } from 'primereact/checkbox';
import { Button } from 'primereact/button';
import { InputText } from 'primereact/inputtext';
import { Calendar } from 'primereact/calendar';
import { Dropdown } from 'primereact/dropdown';
import { Spinner } from 'primereact/spinner';

export interface I<%= entityReactName %>UpdateState {
  isNew: boolean;
  <%_ manyToManyOwners.forEach(val => { _%>
  ids<%= val.relationshipName %>: any[];
  <%_ }) _%>
  <%_ relFieldNames.forEach(val => { _%>
  <%= val.relationshipFieldName %>Id: string;
  <%_ }) _%>
}

export interface I<%= entityReactName %>UpdateProps extends StateProps, DispatchProps, RouteComponentProps<{id: string}>  {}

const  <%= entityReactName %>Update = (props:I<%= entityReactName %>UpdateProps)=> {
  const isNew = !props.match.params || !props.match.params.id;
  const [entity, setEntity] = useState<I<%= entityReactName %>>(props.<%= entityInstance %>Entity);
  const [errors, setErrors] = useState(false);

  <%_ for (idx in fields) {
    const fieldType = fields[idx].fieldType;
    const fieldName = fields[idx].fieldName;
    const fieldNameHumanized = fields[idx].fieldNameHumanized;
  _%>
      <%_
      if (fields[idx].fieldIsEnum) {
        const values = fields[idx].fieldValues.replace(/\s/g, '').split(',');
        let i=0;
      _%>
        const <%=fieldName %>Options= [
        {label:translate('<%= i18nKeyPrefix %>.home.select'), value: null},
        <%_for (i=0;i < values.length;i++) {
          const value = values[i];
        _%>
          {label:'<%= value %>', value:'<%= value %>'},
        <%_ } _%>
        ],
      <%_ } _%>
      ;
  <%_ } _%>

  <%_ if (fieldsContainBlob) {_%>
    const onBlobChange = (isAnImage, name) => event => {
      setFileData(
        event,
        (contentType, data) => {
          setEntity({ ...entity, [name + 'ContentType']: contentType });
          setEntity({ ...entity, [name]: data });
        },
        isAnImage
      );
    };

    const clearBlob = name => () => {
      setEntity({ ...entity, [name + 'ContentType']: undefined });
      setEntity({ ...entity, [name]: undefined });
    };
  <%_ } _%>

    useEffect(() => {
      <%_ if (pagination === 'infinite-scroll') { _%>
      if (!isNew) {
        props.getEntity(props.match.params.id);
      }
      <%_ } else { _%>
      if (isNew) {
        props.reset();
      } else {
        props.getEntity(props.match.params.id);
      }
      <%_ } _%>
      <%_ otherEntityActions.forEach(val => { _%>
      props.<%= val.action %>();
      <%_ }) _%>
    }, []);

    useEffect(() => {
      if (!props.loading) {
        setEntity(props.<%= entityInstance %>Entity);
      }
    }, [props.loading]);

    const handleClose = () => {
      props.history.push('/<%= entityFileName %>'<%_ if (pagination === 'pagination' || pagination === 'pager') { _%> + props.location.search<%_ } _%>);
    }

    useEffect(() => {
      if (props.updateSuccess) {
        handleClose();
      }
    }, [props.updateSuccess]);

    const validateRequired=()=>{
      return (
      <%_ for (idx in fields) {
              const fieldType = fields[idx].fieldType;
              const fieldName = fields[idx].fieldName;
              const fieldNameHumanized = fields[idx].fieldNameHumanized;
              const fieldRequired = fields[idx].fieldNameHumanized;
              const rules = fields[idx].fieldValidateRules;
            _%>
        <%_ if (fields[idx].fieldValidate && fields[idx].fieldValidateRules.includes('required')) { _%>
          !entity.<%= fieldName %> ||
        <%_ } _%>
      <%_}_%>
      false
      )
    }

    const saveEntity = () => {
      if (!validateRequired()) {
        if (isNew) {
          entity.id=null;
          props.createEntity(entity);
        } else {
          props.updateEntity(entity);
        }
        setErrors(false);
      }else{
        setErrors(true);
      }
    }

    const RequiredValidation = ({ entityField }) => errors && !entityField && <Message severity="error" text={translate('entity.validation.required')} />;
    
    const handleInputChange = (event:any) => {
      const { name, value } = event.currentTarget;
      setEntity({ ...entity, [name]: value });
    };

    const handleChange = (event:any) => {
      const { name, value } = event.target;
      setEntity({ ...entity, [name]: value });
    };

    const handleChangeChecked = (event: any) => {
      const { name, checked } = event.target;
      setEntity({ ...entity, [name]: checked });
    };

    return (
      <>
        <div className="p-grid">
          <div className="p-col-12">
            <h2 id="blueprinttestApp.student.home.createOrEditLabel">
              <Translate contentKey="<%= i18nKeyPrefix %>.home.createOrEditLabel">Create or edit a <%= entityClass %></Translate>
            </h2>
          </div>
        </div>
        {props.loading ? (
            <p>Loading...</p>
        ) : (
        <div>
          <div className="p-grid p-justify-center">
            {!isNew && (
            <div className="p-col-8 p-fluid">
              <h5>ID</h5>
              <InputText disabled value={entity.id ? entity.id : ''} />
            </div>
            )}
            <%_ for (idx in fields) {
              const fieldType = fields[idx].fieldType;
              const fieldName = fields[idx].fieldName;
              const fieldNameHumanized = fields[idx].fieldNameHumanized;
              const fieldRequired = fields[idx].fieldNameHumanized;
              const rules = fields[idx].fieldValidateRules;
            _%>
         
              <%_ if (fieldType === 'Boolean') { _%>
              <div className="p-col-8 p-fluid">
                <h5>
                  <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>"><%= fieldNameHumanized %></Translate>
                </h5>
                <Checkbox name="<%= fieldName %>" checked={entity.<%= fieldName %>} onChange={handleChangeChecked} ></Checkbox>
              </div>
              <%_ } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
              <div className="p-col-8"> 
                <h5>
                  <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>"><%= fieldNameHumanized %></Translate>
                </h5>
                <Calendar
                  name="<%= fieldName %>"
                  value={convertDateTimeToServer(entity.<%= fieldName %>)}
                  onChange={handleChange}
                  showTime={true}
                  showSeconds={true}
                  hideOnDateTimeSelect
                />
                <%_ if (fields[idx].fieldValidate && fields[idx].fieldValidateRules.includes('required')) { _%>
                  <RequiredValidation entityField={entity.<%= fieldName %>} />
                <%_ } _%>
              </div>
              <%_ } else if (fieldType === 'LocalDate') { _%>
              <div className="p-col-8"> 
                <h5>
                  <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>"><%= fieldNameHumanized %></Translate>
                </h5>
                <Calendar
                  name="<%= fieldName %>"
                  hideOnDateTimeSelect
                  value={convertDateTimeToServer(entity.<%= fieldName %>)}
                  onChange={handleChange}
                />
                <%_ if (fields[idx].fieldValidate && fields[idx].fieldValidateRules.includes('required')) { _%>
                  <RequiredValidation entityField={entity.<%= fieldName %>} />
                <%_ } _%>
              </div>
              <%_ } else if (fields[idx].fieldIsEnum) {_%>
              <div className="p-col-8 p-fluid"> 
              <h5>
                <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                  <%= fieldNameHumanized %>
                </Translate>
              </h5>
              <Dropdown name="<%= fieldName %>" value={entity.<%= fieldName %>} options={<%= fieldName %>Options} onChange={handleChange} showClear filter placeholder={translate('<%= i18nKeyPrefix %>.home.select')}/>
                <%_ if (fields[idx].fieldValidate && fields[idx].fieldValidateRules.includes('required')) { _%>
                  <RequiredValidation entityField={entity.<%= fieldName %>} />
                <%_ } _%>
              </div>
              <%_} else if (['Integer', 'Long'].includes(fieldType)) { _%>
                <div className="p-col-8 p-fluid"> 
                <h5>
                  <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                    <%= fieldNameHumanized %>
                  </Translate>
                </h5>
                <InputText
                  value={entity.<%= fieldName %> ? entity.<%= fieldName %> : ''}
                  name="<%= fieldName %>" 
                  keyfilter={'int'}
                  onChange={handleChange}
                />
                  <%_ if (fields[idx].fieldValidate && fields[idx].fieldValidateRules.includes('required')) { _%>
                  <RequiredValidation entityField={entity.<%= fieldName %>} />
                  <%_ } _%>
              </div>
              <%_} else if (['Float', 'Double','BigDecimal'].includes(fieldType)) { _%>
                <div className="p-col-8 p-fluid"> 
                <h5>
                  <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                    <%= fieldNameHumanized %>
                  </Translate>
                </h5>
                <InputText
                  value={entity.<%= fieldName %> ? entity.<%= fieldName %> : ''}
                  keyfilter={'num'}
                  name="<%= fieldName %>" 
                  onChange={handleChange}
                />
                  <%_ if (fields[idx].fieldValidate && fields[idx].fieldValidateRules.includes('required')) { _%>
                  <RequiredValidation entityField={entity.<%= fieldName %>} />
                  <%_ } _%>
              </div>
              <%_
          } else if (['byte[]', 'ByteBuffer'].includes(fieldType)) {

            const fieldBlobType = fields[idx].fieldTypeBlobContent;
            if (fieldBlobType !== 'text') {
              const isAnImage = fieldBlobType === 'image';
              const capitalizedFirstLetter =  _.upperFirst(fieldName);

          _%>

          <div className="p-col-8">
            <h5 >
              <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                <%= fieldNameHumanized %>
              </Translate>
            </h5>
      
              <div className="p-grid ">
                  <div className="col-6">
                    {entity.<%= fieldName %> ? (
                    <div>
                    <a onClick={openFile(entity.<%= fieldName %>ContentType, entity.<%= fieldName %>)}>
                    <%_ if (isAnImage) { _%>
                      <img src={`data:${entity.<%= fieldName %>ContentType};base64,${entity.<%= fieldName %>}`} style={{ maxHeight: '100px' }} />
                    <%_ } else { _%>
                      <Translate contentKey="entity.action.open">Open</Translate>
                    <%_ } _%>
                    </a>
                    <span style={{marginLeft:10}}>{entity.<%= fieldName %>ContentType}, {byteSize(entity.<%= fieldName %>)}</span>
                  </div>
                    ) : null}
                    <input id="file_<%= fieldName %>" type="file" onChange={onBlobChange(<%= isAnImage %>, '<%= fieldName %>')} <% if (isAnImage) { %>accept="image/*"<% } %> />
                    <input type="hidden" name="<%= fieldName %>" value={entity.<%= fieldName %>?entity.<%= fieldName %>:''} <%- include react_validators %>/>
                  </div>
                  <div className="col-12" style={{textAlign:"right"}}>
                    <Button className="p-button-danger" label="clear" onClick={clearBlob('<%= fieldName %>')}/>
                  </div>
              </div>
         
          </div>

            <%_ } else { _%>
              <div className="p-col-8 p-fluid">
              <h5>
                <Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>">
                  <%= fieldNameHumanized %>
                </Translate>
              </h5>
              <InputTextarea rows={10}  value={entity.<%= fieldName %>} onChange={handleInputChange} />
            </div>
            <%_ } _%>
          <%_ } else { _%>
              <div className="p-col-8 p-fluid">
                <h5><Translate contentKey="<%= i18nKeyPrefix %>.<%= fieldName %>"><%= fieldNameHumanized %></Translate></h5>
                <InputText name="<%= fieldName %>" value={entity.<%= fieldName %>} onChange={handleInputChange}/>
                  <%_ if (fields[idx].fieldValidate && fields[idx].fieldValidateRules.includes('required')) { _%>
                  <RequiredValidation entityField={entity.<%= fieldName %>} />
                  <%_ } _%>
              </div>
            <%_ } _%>
            <%_ }_%>
            <%_ relationships.forEach(rel => {
                const relationshipType = rel.relationshipType;
                const ownerSide = rel.ownerSide;
                const otherEntityName = rel.otherEntityName;
                const otherEntityNamePlural = rel.otherEntityNamePlural;
                const otherEntityNameCapitalized = rel.otherEntityNameCapitalized;
                const relationshipName = rel.relationshipName;
                const relationshipNameHumanized = rel.relationshipNameHumanized;
                const relationshipFieldName = rel.relationshipFieldName;
                const relationshipFieldNamePlural = rel.relationshipFieldNamePlural;
                const otherEntityField = rel.otherEntityField;
                const otherEntityFieldCapitalized = rel.otherEntityFieldCapitalized;
                const relationshipRequired = rel.relationshipRequired;
                const translationKey = `${i18nKeyPrefix}.${relationshipName}`; 
                const translationKeyPlural = `${i18nKeyPrefix}.${relationshipFieldNamePlural}`; _%>
                <%_ if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true && otherEntityName === 'user')) { _%>

              <%_ if (dto === 'no') { _%>
                  <%_ if (!relationshipRequired) { _%>
                    <Dropdown 
                      value={entity.<%=relationshipName%>Id ? entity.<%=relationshipName%>Id : 0} 
                      options={[...props.<%= otherEntityNamePlural %>.map(e=>({label:e.<%=otherEntityField%>,value:e.id}))]}
                      onChange={(e) => this.setState({cities: e.value})} 
                      filter
                      showClear
                      placeholder="Select..."/>
                  <%_ } else { _%>
                    <Dropdown 
                      value={entity.<%=relationshipName%>Id ? entity.<%=relationshipName%>Id : 0} 
                      options={[...props.<%= otherEntityNamePlural %>.map(e=>({label:e.<%=otherEntityField%>,value:e.id}))]}
                      onChange={(e) => this.setState({cities: e.value})}
                      filter
                      showClear
                      placeholder="Select... required"/>
                  <%_ } _%>
              <%_ } else { _%>
                <%_ if (!relationshipRequired) { _%>
                  <div className="p-col-8 p-fluid">
                    <h5>
                      <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
                    </h5>
                    <Dropdown
                      value={entity.<%=relationshipName%>Id ? entity.<%=relationshipName%>Id : 0}
                      options={[...props.<%= otherEntityNamePlural %>.map(e=>({label:e.<%=otherEntityField%>,value:e.id}))]}
                      onChange={e => setEntity({ ...entity, <%= relationshipName %>Id: e.value })}
                      showClear
                      filter
                      placeholder="Select..."
                    />
                  </div>
                <%_ } else { _%>
                  <div className="p-col-8 p-fluid">
                    <h5>
                      <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
                    </h5>
                    <Dropdown
                      value={entity.<%=relationshipName%>Id ? entity.<%=relationshipName%>Id : 0}
                      options={[...props.<%= otherEntityNamePlural %>.map(e=>({label:e.<%=otherEntityField%>,value:e.id}))]}
                      onChange={e => setEntity({ ...entity, <%= relationshipName %>Id: e.value })}
                      filter
                      showClear
                      placeholder="Select..."
                    />
                  </div>
                <%_ } _%>
              <%_ } _%>

              <%_ } else if (relationshipType === 'one-to-one' && ownerSide === true) { _%>
                <div className="p-col-8 p-fluid">
            <h5 >
              <Translate contentKey="<%= translationKey %>"><%= relationshipNameHumanized %></Translate>
            </h5>
              <%_ if (dto === 'no') { _%>
                <Dropdown
                      value={entity.<%=relationshipName%>Id ? entity.<%=relationshipName%>Id : 0}
                      options={[...props.<%= otherEntityNamePlural %>.map(e=>({label:e.<%=otherEntityField%>,value:e.id}))]}
                      onChange={e => setEntity({ ...entity, <%= relationshipName %>Id: e.value })}
                      showClear
                      filter
                      placeholder="Select..."
                    />
              <%_ } else { _%>
                <Dropdown
                      value={entity.<%=relationshipName%>Id ? entity.<%=relationshipName%>Id : 0}
                      options={[...props.<%= otherEntityNamePlural %>.map(e=>({label:e.<%=otherEntityField%>,value:e.id}))]}
                      onChange={e => setEntity({ ...entity, <%= relationshipName %>Id: e.value })}
                      showClear
                      filter
                      placeholder="Select..."
                    />
              <%_ } _%>
          </div>
          <%_ } else if (relationshipType === 'many-to-many' && rel.ownerSide === true) { _%>
            <div className="p-col-8 p-fluid">
            <%_ if (otherEntityName === 'user') { _%>
            <h5 >
              <Translate contentKey="<%= translationKeyPlural %>"><%= relationshipNameHumanized %></Translate>
            </h5>
            <ListBox
                value={entity.users&&entity.users.map(user=>user.id) }
                options={[...props.users.map(e => ({ label: e.<%=otherEntityField%>, value: e.id }))]}
                onChange={e => setEntity({ ...entity, users: e.value.map(value=>props.users.find(user=>user.id===value))})}
                listStyle={{ maxHeight: '150px' }}
                multiple
                filter
              />
            <%_ }else{ _%>
            <h5 >
              <Translate contentKey="<%= translationKeyPlural %>"><%= relationshipNameHumanized %></Translate>
            </h5>
            <ListBox
              value={entity.<%=relationshipFieldNamePlural%>? entity.<%=relationshipFieldNamePlural%> : []}
              options={[...props.<%= relationshipFieldNamePlural %>.map(e=>({label:e.<%=otherEntityField%>,value:e}))]}
              onChange={e => setEntity({ ...entity, <%= relationshipFieldNamePlural %>: e.value })}
              listStyle={{maxHeight: '150px'}}
              multiple
              filter
            />
            <%_ } _%>
            </div>
          <%_ } _%>
          <%_ }) _%>
          </div>
          <div className="p-grid p-justify-center">
            <div className="p-col-8">
              <Button label={translate('entity.action.back')} onClick={() => props.history.goBack()} />
                  &nbsp;
              <Button label={translate('entity.action.save')} onClick={saveEntity} />
            </div>
          </div>
        </div>  
        )}
    </>
    );
}

const mapStateToProps = (storeState: IRootState) => ({
  <%_ otherEntityActions.forEach(val => { _%>
    <%= val.instance %>: storeState.<%= val.reducer %>.<%= val.entity === 'User' ? val.instance : 'entities' %>,
  <%_ }) _%>
  <%= entityInstance %>Entity: storeState.<%= entityInstance %>.entity,
  loading: storeState.<%= entityInstance %>.loading,
  updating: storeState.<%= entityInstance %>.updating,
  updateSuccess: storeState.<%= entityInstance %>.updateSuccess,
});

const mapDispatchToProps = {
  <%_ otherEntityActions.forEach(val => { _%>
  <%= val.action %>,
  <%_ }) _%>
  getEntity,
  updateEntity,
  <%_ if (fieldsContainBlob) { _%>
  setBlob,
  <%_ } _%>
  createEntity,
  reset
};

type StateProps = ReturnType<typeof mapStateToProps>;
type DispatchProps = typeof mapDispatchToProps;

export default connect(mapStateToProps, mapDispatchToProps)(<%= entityReactName %>Update);
