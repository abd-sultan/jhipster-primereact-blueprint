<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import React, { useState, useEffect } from 'react';
import { translate } from 'react-jhipster';
<%_ if (pagination === 'infinite-scroll')Â { _%>
import InfiniteScroll from 'react-infinite-scroller';
<%_ } _%>
import { connect } from 'react-redux';
import { Link, RouteComponentProps } from 'react-router-dom';
import {
  <%_ if (blobFields.length > 0) { _%>
    <%_ if (fieldsContainBlobOrImage) { _%>
  openFile,
    <%_ } _%>
  byteSize,
  <%_ } _%>
  Translate<% if (searchEngine === 'elasticsearch') { %>, translate, ICrudSearchAction<% } %>,
  ICrudGetAllAction<% if (fieldsContainDate) { %>, TextFormat<% } %>
  <%_ if (pagination !== 'no') { _%>
  , getSortState, IPaginationBaseState
  <%_ if (pagination === 'pagination' || pagination === 'pager') { _%>
  , JhiPagination, JhiItemCount
  <%_ }} _%>
} from 'react-jhipster';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

import { IRootState } from 'app/shared/reducers';
import {
  <%_ if (searchEngine === 'elasticsearch') { _%>
  getSearchEntities,
  <%_ } _%>
  getEntities, getEntitiesByQuery
  <%_ if (pagination === 'infinite-scroll') { _%>
  , reset
  <%_ } _%>
} from './<%= entityFileName %>.reducer';
import { I<%= entityReactName %> } from 'app/shared/model/<%= entityModelFileName %>.model';
 import { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from 'app/config/constants';
<%_ if (pagination !== 'no') { _%>
import { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';
<%_ } _%>
import { DataTable } from 'primereact/datatable';
import { Column } from 'primereact/column';
import { Dialog } from 'primereact/dialog';
import { MultiSelect } from 'primereact/multiselect';
import { OverlayPanel } from 'primereact/overlaypanel';
import { InputText } from 'primereact/inputtext';
import { ScrollPanel } from 'primereact/scrollpanel';
import { Dropdown } from 'primereact/dropdown';
import { Button } from 'primereact/button';

export interface I<%= entityReactName %>Props extends StateProps, DispatchProps, RouteComponentProps<{ url: string }> {

}

<% if (searchEngine === 'elasticsearch' && pagination !== 'no') { _%>
export interface I<%= entityReactName %>State extends IPaginationBaseState {
  search: string;
}
<%_ } else if (searchEngine === 'elasticsearch') { _%>
export interface I<%= entityReactName %>State {
  search: string;
}
<%_ } else if (pagination !== 'no') { _%>
export type I<%= entityReactName %>State = IPaginationBaseState;
<%_ } _%>

export const <%= entityReactName %> = (props: I<%= entityReactName %>Props) => {
  let op;
  let dt;
  const cols = [
  <%_ for (idx in fields) { 
    const fieldType = fields[idx].fieldType;
    const fieldName = fields[idx].fieldName;
    const fieldIsEnum = fields[idx].fieldIsEnum;
    _%>
    {
    field:'<%=fieldName%>',
    <%_if (fieldIsEnum && enableTranslation){_%>
    fieldType:'Enum',
    <%_} else{_%>
    fieldType:'<%=fieldType%>',
    <%_ } _%>
    header: translate('<%= i18nKeyPrefix %>.<%=fields[idx].fieldName%>'),
    },
  <%_ } _%>
  <%_ for (idx in relationships) {
    const relationshipType = relationships[idx].relationshipType;
    const ownerSide = relationships[idx].ownerSide;
    const relationshipFieldName = relationships[idx].relationshipFieldName;
    const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
    const otherEntityName = relationships[idx].otherEntityName;
    const otherEntityStateName = relationships[idx].otherEntityStateName;
    const otherEntityField = relationships[idx].otherEntityField;
    const otherEntityFieldCapitalized = relationships[idx].otherEntityFieldCapitalized; _%>
    <%_ if (relationshipType === 'many-to-one'
    || (relationshipType === 'one-to-one' && ownerSide === true)
    || (relationshipType === 'many-to-many' && ownerSide === true && pagination === 'no')) { _%>
    <%_ if (dto === 'no') { _%>
      {
        field:'<%=fields[idx].fieldName%>',
        fieldType:'String',
        header: translate('<%= i18nKeyPrefix %>.<%=fields[idx].fieldName%>')
      },
    <%_ } else { _%>
      {
        field:'<%=relationshipFieldName%>Id',
        fieldType:'Long',
        header: translate('<%= i18nKeyPrefix %>.<%= relationshipFieldName%>')
      },
    <%_ } _%>
  <%_ } _%>
  <%_ } _%>
    {
      field:'actions',
      fieldType:'action',
      header: '',
    }
    ]


  const [rows, setRows] = useState(10);
  const [first, setFirst] = useState(0);
  const [filters, setFilters] = useState({});
  const [columns, setColumns] = useState(cols);

  useEffect(() => {
    <%_ if (pagination !== 'no') { _%>
      <%_ if (pagination === 'infinite-scroll') { _%>
      this.reset();
      <%_ } else { _%>
        props.getEntitiesByQuery({ rows, first, filters });
      <%_ } _%>
    <%_ } else { _%>
    props.getEntities();
    <%_ } _%>
  }, []);

  const { <%= entityInstance %>List, totalItems } = props;

  const getEntitiesFiltered = (event: any) => {
    const filter = { size: event.rows, page: event.first / event.rows, sort: 'id,asc' };
    Object.keys(event.filters).forEach(key => {
      filter[key + '.' + event.filters[key].matchMode] = event.filters[key].value;
    });
    props.getEntitiesByQuery(filter);
  };

  const onPage = (event: any) => {
    setFirst(event.first);
    setRows(event.rows);
    getEntitiesFiltered({ rows: event.rows, first: event.first, filters });
  };

  const onFilter = (event: any) => {
    setFilters(event.filters);
    getEntitiesFiltered({ rows, first, filters: event.filters });
  };

  const filterEnumOptions = {
  <%_ for (idx in fields) {
    const fieldType = fields[idx].fieldType;
    const fieldName = fields[idx].fieldName;
    const fieldNameHumanized = fields[idx].fieldNameHumanized;
  _%>
      <%_
      if (fields[idx].fieldIsEnum) {
        const values = fields[idx].fieldValues.replace(/\s/g, '').split(',');
        let i=0;
      _%>
        <%= fieldName %>: [
        {label:translate('<%= i18nKeyPrefix %>.home.select'), value: null},
        <%_for (i=0;i < values.length;i++) {
          const value = values[i];
        _%>
          {label:'<%= value %>', value:'<%= value %>'},
        <%_ } _%>
        ],
      <%_ } _%>
  <%_ } _%>
  }

  const filterOptions = (field, fieldType) => {
    return (
      <div>
        {fieldType === 'Enum' ? (
          <Dropdown
            filter
            appendTo={document.body}
            value={filters[field] && filters[field].value}
            options={filterEnumOptions[field]}
            onChange={e => {
              dt.filter(e.value, field, 'equals');
            }}
          />
        ) : (
          <InputText
            value={filters[field] ? filters[field].value:''}
            onChange={e => {
              dt.filter(e.currentTarget.value, field, fieldType === 'String' ? 'contains' : 'equals');
            }}
          />
        )}
      </div>
    );
  };

  const header = (
    <div className="p-grid">
      <div className="p-col-6" style={{ textAlign: 'left' }}>
        <Button className="p-button-secondary" label={translate('<%= i18nKeyPrefix %>.home.createLabel')} />
      </div>
      <div className="p-col-6" style={{ textAlign: 'right' }}>
      <Button type="button" className="p-button-secondary" label={translate('<%= i18nKeyPrefix %>.home.showColumns')} onClick={e => op.toggle(e)} />
        <OverlayPanel ref={el => (op = el)} appendTo={document.body} showCloseIcon={true} dismissable={true}>
          <MultiSelect
            style={{ minWidth: '12em' }}
            value={columns}
            options={cols}
            optionLabel="field"
            onChange={e => setColumns(e.value)}
          />
        </OverlayPanel>
      </div>
    </div>
  );

  const fieldTemplate = (entity: any, column: any) => {
    if (column['fieldType'] === 'action') {
      return (
        <div style={{ width: 240, textAlign: 'center' }}>
          <Button
            type="button"
            onClick={() => props.history.push('<%= entityInstance %>/' + entity.id + '/edit')}
            icon="pi pi-pencil"
            className="p-button-warning"
            style={{ marginRight: '.5em' }}
            label={translate('entity.action.edit')}
          />
          <Button
            type="button"
            onClick={() => props.history.push('<%= entityInstance %>/' + entity.id + '/delete')}
            icon="pi pi-times"
            className="p-button-danger"
            style={{ marginRight: '.5em' }}
            label={translate('entity.action.delete')}
          />
        </div>
      );
    } else if (column['fieldType'] === 'Boolean'){
      return <span>{entity[column['field']]?'true':'false'}</span>;
    } else {
      return <span>{entity[column['field']]}</span>;
    }
  };

  return (
    <div style={{ minHeight: '100vh' }}>
      {
        <DataTable
          ref={el => (dt = el)}
          lazy
          value={[...<%= entityInstance %>List]}
          paginator
          paginatorTemplate="PageLinks FirstPageLink PrevPageLink CurrentPageReport NextPageLink LastPageLink RowsPerPageDropdown "
          first={first}
          rows={rows}
          rowsPerPageOptions={[10, 15, 20, 25]}
          onFilter={onFilter}
          filters={filters}
          onPage={onPage}
          totalRecords={totalItems}
          paginatorPosition="top"
          header={header}
          autoLayout
        >
          {columns &&
            columns.map((col, i) => {
              return (
                <Column
                  body={entity => fieldTemplate(entity, col)}
                  key={col.field}
                  field={col.field}
                  header={col.header}
                  filterMatchMode={col.fieldType === 'Enum'||col.fieldType === 'Boolean' ? 'equals' : 'contains'}
                  filter={col.fieldType === 'action'?false:true}
                  style={col.fieldType === 'action' ? { width: 260 } : col.fieldType === 'Enum' ? { width: 200 } : { width: 100 }}
                  filterElement={filterOptions(col.field,col.fieldType)}
                />
              );
            })
          }
        </DataTable>
      }
    </div>
  );

}

  const mapStateToProps = ({ <%= entityInstance %> }: IRootState) => ({
    <%= entityInstance %>List: <%= entityInstance %>.entities,
    <%_ if (pagination !== 'no') { _%>
    totalItems: <%= entityInstance %>.totalItems,
    <%_ } _%>
    <%_ if (pagination === 'infinite-scroll') { _%>
    links: <%= entityInstance %>.links,
    entity: <%= entityInstance %>.entity,
    updateSuccess: <%= entityInstance %>.updateSuccess,
    <%_ } _%>
  });

  const mapDispatchToProps = {
  <%_ if (searchEngine === 'elasticsearch') { _%>
  getSearchEntities,
  <%_ } _%>
  getEntities, getEntitiesByQuery,
  <%_ if (pagination === 'infinite-scroll') { _%>
  reset
  <%_ } _%>
  };


type StateProps = ReturnType<typeof mapStateToProps>;
type DispatchProps = typeof mapDispatchToProps;

export default connect(mapStateToProps, mapDispatchToProps)(<%= entityReactName %>);
