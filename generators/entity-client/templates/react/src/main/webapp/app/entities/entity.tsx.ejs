<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import React, { useState, useEffect, useRef } from 'react';
<%_ if (pagination === 'infinite-scroll') { _%>
import InfiniteScroll from 'react-infinite-scroller';
<%_ } _%>
import { connect } from 'react-redux';
import { RouteComponentProps } from 'react-router-dom';
<%_ if (searchEngine === 'elasticsearch') { _%>
import { AvForm, AvGroup, AvInput } from 'availity-reactstrap-validation';
<%_ } _%>
import {
  translate ,
  <%_ if (fieldsContainBlob) { _%>
    setFileData,
    <% if (fieldsContainBlobOrImage) { %> openFile,<% } %>
    byteSize,
  <%_ } _%>
} from 'react-jhipster';
import { IRootState } from 'app/shared/reducers';
import { fieldTemplate,  <%_ if (jpaMetamodelFiltering) { _%> filterTemplate, <%_ } _%>  } from './<%= entityFileName %>-template';
<%_
let hasRelationshipQuery = false;
let otherEntityActions = new Set();
let manyToManyOwners = new Set();
let relFieldNames = new Set();
let uniqueRealtionFields = new Set();


Object.keys(differentRelationships).forEach(key => {

  const hasAnyRelationshipQuery = differentRelationships[key].some(rel =>
      (rel.relationshipType === 'one-to-one' && rel.ownerSide === true && rel.otherEntityName !== 'user')
          || rel.relationshipType !== 'one-to-many'
  );
  if (hasAnyRelationshipQuery) {
    hasRelationshipQuery = true;
    differentRelationships[key].forEach(rel => {
      if (rel.relationshipType === 'many-to-many' && rel.ownerSide === true) {
        manyToManyOwners.add(rel);
      } else {
        relFieldNames.add(rel);
      }
    });
  }
  if (differentRelationships[key].some(rel => rel.relationshipType !== 'one-to-many')) {
    const uniqueRel = differentRelationships[key][0];
    uniqueRealtionFields.add(uniqueRel.otherEntityNamePlural);
    otherEntityActions.add({
      action: `get${upperFirstCamelCase(uniqueRel.otherEntityNamePlural)}`,
      instance: `${uniqueRel.otherEntityNamePlural}`,
      entity: uniqueRel.otherEntityAngularName,
      reducer: uniqueRel.otherEntityAngularName === 'User' ? 'userManagement' : uniqueRel.otherEntityName,
      entityField: uniqueRel.otherEntityField,
      ownerSide:uniqueRel.ownerSide,
      test: uniqueRel.relationshipType==='one-to-one'&&JSON.stringify(uniqueRel),
      relationshipType: uniqueRel.relationshipType,
      relationshipFieldName: uniqueRel.relationshipFieldName,
      relationshipFieldNamePlural: uniqueRel.relationshipFieldNamePlural
    });
    if (uniqueRel.otherEntityAngularName === 'User') {
_%>
<%_ if (authenticationType === 'oauth2') { _%>
import { getUsers } from 'app/shared/reducers/user-management';
<%_ } else { _%>
import { getUsers } from 'app/modules/administration/user-management/user-management.reducer';
<%_ } _%>
<%_
  } else {
    if (uniqueRel.otherEntityAngularName !== entityReactName) {
_%>
  <%_ } _%>
import { getEntities as get<%= upperFirstCamelCase(uniqueRel.otherEntityNamePlural) %> } from 'app/entities/<%= uniqueRel.otherEntityPath %>/<%= uniqueRel.otherEntityFileName %>.reducer';
<%_ }
  }
}); _%>
import {
  <%_ if (jpaMetamodelFiltering) { _%>
    getEntitiesByQuery,
  <%_ } _%>
  <%_ if (searchEngine === 'elasticsearch') { _%>
  getSearchEntities,
  <%_ } _%>
  getEntities, 
  deleteEntity,
  reset
} from './<%= entityFileName %>.reducer';
import { DataTable } from 'primereact/datatable';
import { Column } from 'primereact/column';
import { MultiSelect } from 'primereact/multiselect';
import { OverlayPanel } from 'primereact/overlaypanel';
import { Button } from 'primereact/button';
import { Dialog } from 'primereact/dialog';


export interface I<%= entityReactName %>Props extends StateProps, DispatchProps, RouteComponentProps<{url: string}> {}

export const <%= entityReactName %> = (props: I<%= entityReactName %>Props) => {
  const overlayPanel = useRef(null);
  const dataTableRef = useRef(null);
  const cols = [
  { field:'id', fieldType:'Long' },
  <%_ for (idx in fields) { 
    const fieldType = fields[idx].fieldType;
    const fieldName = fields[idx].fieldName;
    const fieldIsEnum = fields[idx].fieldIsEnum;
    _%>
    {field:'<%=fieldName%>', 
    <%_if (fieldIsEnum && enableTranslation){_%> fieldType:'Enum',
    <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType)) { _%>
    <%_ if (fields[idx].fieldTypeBlobContent === 'image') { _%>
    fieldType:'blobImage',
    <%_} else if (fields[idx].fieldTypeBlobContent === 'text') { _%>
    fieldType:'blobText',
    <%_ } else { _%>
    fieldType:'blob',  
    <%_ } _%>
    <%_} else {_%>
    fieldType:'<%=fieldType%>',
    <%_ } _%>
    },
  <%_ } _%>
  <%_ for (idx in relationships) {
    const relationshipType = relationships[idx].relationshipType;
    const ownerSide = relationships[idx].ownerSide;
    const relationshipFieldName = relationships[idx].relationshipFieldName;
    const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
    const otherEntityName = relationships[idx].otherEntityName;
    const otherEntityStateName = relationships[idx].otherEntityStateName;
    const otherEntityField = relationships[idx].otherEntityField;
    const otherEntityFieldCapitalized = relationships[idx].otherEntityFieldCapitalized; _%>
    <%_ if (relationshipType === 'many-to-one'
    || (relationshipType === 'one-to-one' && ownerSide === true)
    || (relationshipType === 'many-to-many' && ownerSide === true )) { _%>
    <%_ if (relationshipType === 'many-to-many') { _%>
      <%_ if (otherEntityName === 'user') { _%>
        <%_ if (dto === 'no') { _%>
          { field:'<%=relationshipFieldNamePlural%>', fieldType: 'RelationshipList' },
        <%_ } else { _%>
          { field:'<%=relationshipFieldNamePlural%>', fieldType: 'RelationshipList', otherEntityField:'<%=otherEntityField%>' },
        <%_ } _%>
      <%_ } else { _%>
        <%_ if (dto === 'no') { _%>
          { field:'<%=relationshipFieldNamePlural%>', fieldType: 'RelationshipList' },
          <%_ } else { _%>
            { field:'<%=relationshipFieldNamePlural%>', fieldType: 'RelationshipList', otherEntityField:'<%=otherEntityField%>' },
          <%_ } _%>
      <%_ } _%>
    <%_ } else{ _%>
      <%_ if (otherEntityName === 'user') { _%>
        <%_ if (dto === 'no') { _%>
          { field:'<%=relationshipFieldName%>', fieldType: 'String' },
        <%_ } else { _%>
          { field:'<%=relationshipFieldName%>', fieldType: 'Relationship', otherEntityFieldCapitalized:'<%=otherEntityFieldCapitalized%>' },
        <%_ } _%>
      <%_ } else { _%>
        <%_ if (dto === 'no') { _%>
          { field:'<%=relationshipFieldName%>', fieldType: 'String' },
          <%_ } else { _%>
            { field:'<%=relationshipFieldName%>', fieldType: 'Relationship', otherEntityFieldCapitalized:'<%=otherEntityFieldCapitalized%>' },
          <%_ } _%>
      <%_ } _%>
    <%_ }  _%>
    <%_ }  _%>
  <%_ } _%>
    ]


  const [columns, setColumns] = useState(cols);
  const [visible, setVisible] = useState(false);
  const [selectedEntity, setSelectedEntity] = useState();
  <%_ if (searchEngine === 'elasticsearch' || pagination !== 'no') { _%>
    <%_ if (searchEngine === 'elasticsearch') { _%>
  const [search, setSearch] = useState('');
    <%_ } _%>
    <%_ if (pagination !== 'no') { _%>
  const [first, setFirst] = useState(0);
  const [rows, setRows] = useState(10);
  const [sortField, setSortField] = useState('id');
  const [sortOrder, setSortOrder] = useState(1);
    <%_ } _%>
  <%_ } _%>
  <%_ if (pagination === 'infinite-scroll') { _%>
  const [sorting, setSorting] = useState(false);
  <%_ } _%>
  <%_ if (jpaMetamodelFiltering) { _%>
  const [filters, setFilters] = useState({});
  const [relationshipOptions, setRelationshipOptions] = useState({});
  <%_ } _%>

  <%_ if (pagination === 'pagination' || pagination === 'pager' || pagination === 'infinite-scroll' || pagination !== 'no' && pagination !== 'infinite-scroll') { _%>
  const getAllEntities = () => {
  <%_ if (jpaMetamodelFiltering) { _%>
    props.getEntitiesByQuery( first/rows, rows, `${sortField},${sortOrder===1?'asc':'desc'}`,filters);
  <%_ }else{ _%>
    <%_ if (searchEngine === 'elasticsearch') { _%>
    if (search) {
      props.getSearchEntities(search, paginationState.activePage - 1, paginationState.itemsPerPage, `${paginationState.sort},${paginationState.order}`);
    } else {
      props.getEntities(paginationState.activePage - 1, paginationState.itemsPerPage, `${paginationState.sort},${paginationState.order}`);
    }
    <%_ } else { _%>
      props.getEntities(first/rows, rows, `${sortField},${sortOrder===1?'asc':'desc'}`);
    <%_ } _%>
  <%_ } _%>
  };
  <%_ } _%>

  <%_ if (pagination === 'infinite-scroll') { _%>
  const resetAll = () => {
    props.reset();
    setPaginationState({
      ...paginationState,
      activePage: 1
    });
  };
  <%_ } _%>

  useEffect(() => {
    <%_ if (pagination !== 'no') { _%>
      <%_ if (pagination === 'infinite-scroll') { _%>
    resetAll();
      <%_ } else { _%>
    getAllEntities();
      <%_ } _%>
    <%_ } else { _%>
    props.getEntities();
    <%_ } _%>
    <%_ otherEntityActions.forEach(val => { _%>
      props.<%= val.action %>();
    <%_ }) _%>
  }, []);

  <%_ if (pagination === 'infinite-scroll') { _%>
  useEffect(() => {
    if (props.updateSuccess) {
      getAllEntities();
    }
  });
  <%_ } _%>

  <%_ if (searchEngine === 'elasticsearch') { _%>
    <%_ if (pagination !== 'no') { _%>
  useEffect(() => {
    props.getSearchEntities(search, paginationState.activePage - 1, paginationState.itemsPerPage, `${paginationState.sort},${paginationState.order}`);
  }, [paginationState.activePage]);

    <%_ } _%>
  const startSearching = () => {
    if (search) {
      <%_ if (pagination === 'infinite-scroll') { _%>
      props.reset();
      <%_ } _%>
      <%_ if (pagination !== 'no') { _%>
      setPaginationState({
        ...paginationState,
        activePage: 1
      });
      <%_ } else { _%>
      props.getSearchEntities(search);
      <%_ } _%>
    }
  };

  useEffect(() => {
    props.getEntities()
  }, [<%_ if (pagination !== 'no') { _%>paginationState.activePage, <%_ } _%>search]);

  const clear = () => {
    <%_ if (pagination === 'infinite-scroll') { _%>
    props.reset();
    <%_ } _%>
    setSearch('');
    <%_ if (pagination !== 'no') { _%>
    setPaginationState({
      ...paginationState,
      activePage: 1
    });
    <%_ } _%>
  };

  const handleSearch = event => setSearch(event.target.value);
  <%_ } _%>

  <%_ if (pagination === 'infinite-scroll') { _%>
  useEffect(() => {
    getAllEntities()
  }, [paginationState.activePage]);

  const handleLoadMore = () => {
    if (window.pageYOffset > 0) {
      setPaginationState({
        ...paginationState,
        activePage: paginationState.activePage + 1
      });
    }
  };
  <%_ } _%>

  <%_ if (pagination !== 'no') { _%>
    const onPage = (event: any) => {
      setFirst(event.first);  
      setRows(event.rows);
      <%_ if (jpaMetamodelFiltering) { _%>
      props.getEntitiesByQuery(event.first / event.rows, event.rows, `${sortField},${sortOrder === 1 ? 'asc' : 'desc'}`,{});
      <%_ } else { _%>
      props.getEntities(first/rows, rows, `${sortField},${sortOrder}`);
      <%_ } _%>
    };
    const onSort = event => {
      setSortField(event.sortField);
      setSortOrder(event.sortOrder);
      props.getEntities(event.first/ event.rows, event.rows, `${event.sortField},${event.sortOrder===1?'asc':'desc'}`);
    };
  <%_ } _%>
  <%_ if (jpaMetamodelFiltering) { _%>
    
    const onFilter = (event: any) => {
      setFilters(event.filters);
      props.getEntitiesByQuery(first / rows, rows,  `${sortField},${sortOrder===1?'asc':'desc'}`, event.filters );
    };
    useEffect(() => {
      const options = {};
      <%_ for (idx in fields) {
        const fieldType = fields[idx].fieldType;
        const fieldName = fields[idx].fieldName;
        const fieldNameHumanized = fields[idx].fieldNameHumanized;
      _%>
          <%_
          if (fields[idx].fieldIsEnum) {
            const values = fields[idx].fieldValues.replace(/\s/g, '').split(',');
            let i=0;
          _%>
          options['<%=fieldName %>']= [
            <%_for (i=0;i < values.length;i++) {
              const value = values[i];
            _%>
              {label:'<%= value %>', value:'<%= value %>'},
            <%_ } _%>
            ];
          <%_ } _%>
      <%_ } _%>
      <%_ otherEntityActions.forEach(val => { _%>
        <%_ if (val.relationshipType === 'many-to-many') {  _%>
        options['<%= val.relationshipFieldNamePlural %>']=props.<%= val.instance %>.map(e => ({ label: e.<%= val.entityField %>, value: e.id }));
        <%_ } else {_%>
          <%_ if (val.ownerSide) {  _%>
        options['<%= val.relationshipFieldName %>Id']=props.<%= val.instance %>.map(e => ({ label: e.<%= val.entityField %>, value: e.id }));
          <%_ } else {_%>
        options['<%= val.relationshipFieldName %>Id']=props.<%= val.instance %>.map(e => ({ label: e.<%= val.entityField %>, value: e.id }));
          <%_ } _%>
        <%_ } _%>
      <%_ }) _%>      
      setRelationshipOptions(options);
    }, [ <%_ otherEntityActions.forEach(val => { _%>props.<%= val.instance %>, <%_ }) _%>]);
    
  <%_ } _%>
  

  const header = (
    <div className="p-grid">
      <div className="p-col-6" style={{ textAlign: 'left' }}>
        <Button className="p-button-primary" label={translate('<%= i18nKeyPrefix %>.home.createLabel')} onClick={()=>{props.history.push('<%= entityModelFileName %>/new');props.reset();}} />
      </div>
      <div className="p-col-6" style={{ textAlign: 'right' }}>
      <Button type="button" className="p-button-primary" label={translate('<%= i18nKeyPrefix %>.home.showColumns')} onClick={e => overlayPanel.current.toggle(e)} />
        <OverlayPanel ref={overlayPanel} appendTo={document.body} showCloseIcon={true} dismissable={true}>
          <MultiSelect
            style={{ minWidth: '12em' }}
            value={columns}
            options={cols}
            optionLabel="field"
            onChange={e => setColumns(e.value)}
          />
        </OverlayPanel>
      </div>
    </div>
  );

  return (
    <div>
      <Dialog
        appendTo={document.body}
        header={translate('entity.delete.title')}
        footer={
          <div>
            <Button
              label="Yes"
              onClick={() => {
                setVisible(false);
                props.deleteEntity(selectedEntity && selectedEntity.id);
              }}
            />
            <Button label="No" onClick={() => setVisible(false)} />
          </div>
        }
        visible={visible}
        style={{ width: '35rem', zIndex: 50 }}
        modal
        onHide={() => setVisible(false)}
      >
        {translate('smartmanagerApp.zoneId.delete.question', { id: selectedEntity && selectedEntity.id })}
      </Dialog>
      {
        <DataTable
          ref={dataTableRef}
          value={[...props.<%= entityInstance %>List]}
          header={header}
          autoLayout
          <%_ if (pagination !== 'no') { _%>
          lazy  
          paginator
          paginatorTemplate="PageLinks FirstPageLink PrevPageLink CurrentPageReport NextPageLink LastPageLink RowsPerPageDropdown "
          rowsPerPageOptions={[10, 15, 20, 25]}
          paginatorPosition="top"
          first={first}
          rows={rows}
          onPage={onPage}
          sortField={sortField}
          sortOrder={sortOrder}
          onSort={onSort}
          <%_ } _%>
          <%_ if (jpaMetamodelFiltering) { _%>
          onFilter={onFilter}
          filters={filters}
          totalRecords={props.totalItems}
          <%_ } _%>
        >
          {columns &&
            columns.map((col, i) => {
              return (
                <Column
                  body={entity => fieldTemplate(entity, col, props.history, props.match.url)}
                  key={col.field}
                  field={col.field}
                  header={col.field === 'id' ? 'Id' :translate('<%= i18nKeyPrefix %>.' + col.field)}
                  <%_ if (pagination !== 'no') { _%>
                  sortable={ col.fieldType.includes('blob') ? false : true }
                  <%_ } _%>
                  <%_ if (jpaMetamodelFiltering) { _%>
                  filterMatchMode={col.fieldType === 'Enum'||col.fieldType === 'Boolean' ? 'equals' : 'contains'}
                  filter={col.fieldType.includes('blob')?false:true}
                  style={ col.fieldType === 'Enum' ? { width: 200 } : { width: 100 }}
                  filterElement={filterTemplate(col.field, col.fieldType, filters, setFilters, relationshipOptions, dataTableRef)}
                  <%_ } _%>
                />
              );
            })
          }
          <Column
            body={entity => (
              <div style={{ width: 150, textAlign: 'center' }}>
                <Button
                  type="button"
                  onClick={() => props.history.push(`${props.match.url}/${entity.id}`)}
                  icon="pi pi-search"
                  className="p-button-success"
                  style={{ marginRight: '.5em' }}
                  tooltip={translate('entity.action.view')}
                  tooltipOptions={{ position: 'top' }}
                />
                <Button
                  type="button"
                  onClick={() => props.history.push(`${props.match.url}/${entity.id}/edit`)}
                  icon="pi pi-pencil"
                  className="p-button-warning"
                  style={{ marginRight: '.5em' }}
                  tooltip={translate('entity.action.edit')}
                  tooltipOptions={{ position: 'top' }}
                />
                <Button
                  onClick={() => {
                    setSelectedEntity(entity);
                    setVisible(true);
                  }}
                  icon="pi pi-times"
                  className="p-button-danger"
                  style={{ marginRight: '.5em' }}
                  tooltip={translate('entity.action.delete')}
                  tooltipOptions={{ position: 'top' }}
                />
              </div>
            )}
            header=""
            style={{ width: 260 }}
          />
        </DataTable>
      }
    </div>
  );
};

const mapStateToProps = ( storeState : IRootState) => ({
  <%= entityInstance %>List: storeState.<%= entityInstance %>.entities,
  <%_ if (pagination !== 'no') { _%>
  totalItems: storeState.<%= entityInstance %>.totalItems,
  <%_ } _%>
  <%_ if (pagination === 'infinite-scroll') { _%>
  links: storeState.<%= entityInstance %>.links,
  entity: storeState.<%= entityInstance %>.entity,
  updateSuccess: storeState.<%= entityInstance %>.updateSuccess,
  <%_ } _%>  
  <%_ otherEntityActions.forEach(val => { _%>
    <%= val.instance %>: storeState.<%= val.reducer %>.<%= val.entity === 'User' ? val.instance : 'entities' %>,
  <%_ }) _%>
  
});

const mapDispatchToProps = {
 <%_ otherEntityActions.forEach(val => { _%>
 <%= val.action %>,
 <%_ }) _%>
 <%_ if (searchEngine === 'elasticsearch') { _%>
 getSearchEntities,
 <%_ } _%>
 getEntities,
 deleteEntity,
 <%_ if (jpaMetamodelFiltering) { _%>
  getEntitiesByQuery,
 <%_ } _%>
 reset
};

type StateProps = ReturnType<typeof mapStateToProps>;
type DispatchProps = typeof mapDispatchToProps;

export default connect(mapStateToProps, mapDispatchToProps)(<%= entityReactName %>);